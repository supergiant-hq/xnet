// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: model/p2p.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type P2PClientContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnId string `protobuf:"bytes,1,opt,name=connId,proto3" json:"connId,omitempty"`
	PeerId string `protobuf:"bytes,2,opt,name=peerId,proto3" json:"peerId,omitempty"`
	Active bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *P2PClientContext) Reset() {
	*x = P2PClientContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PClientContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PClientContext) ProtoMessage() {}

func (x *P2PClientContext) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PClientContext.ProtoReflect.Descriptor instead.
func (*P2PClientContext) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *P2PClientContext) GetConnId() string {
	if x != nil {
		return x.ConnId
	}
	return ""
}

func (x *P2PClientContext) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *P2PClientContext) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type P2PData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *P2PData) Reset() {
	*x = P2PData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PData) ProtoMessage() {}

func (x *P2PData) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PData.ProtoReflect.Descriptor instead.
func (*P2PData) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *P2PData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type P2PPeerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address   string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *P2PPeerData) Reset() {
	*x = P2PPeerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PPeerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PPeerData) ProtoMessage() {}

func (x *P2PPeerData) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PPeerData.ProtoReflect.Descriptor instead.
func (*P2PPeerData) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *P2PPeerData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *P2PPeerData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *P2PPeerData) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type P2PConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode         string       `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	RelayAddress string       `protobuf:"bytes,3,opt,name=relayAddress,proto3" json:"relayAddress,omitempty"`
	Peer         *P2PPeerData `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *P2PConnectionRequest) Reset() {
	*x = P2PConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PConnectionRequest) ProtoMessage() {}

func (x *P2PConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PConnectionRequest.ProtoReflect.Descriptor instead.
func (*P2PConnectionRequest) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{3}
}

func (x *P2PConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *P2PConnectionRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *P2PConnectionRequest) GetRelayAddress() string {
	if x != nil {
		return x.RelayAddress
	}
	return ""
}

func (x *P2PConnectionRequest) GetPeer() *P2PPeerData {
	if x != nil {
		return x.Peer
	}
	return nil
}

type P2PConnectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode         string       `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Status       bool         `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Retry        bool         `protobuf:"varint,4,opt,name=retry,proto3" json:"retry,omitempty"`
	Message      string       `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Peer         *P2PPeerData `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	RelayAddress string       `protobuf:"bytes,7,opt,name=relayAddress,proto3" json:"relayAddress,omitempty"`
}

func (x *P2PConnectionData) Reset() {
	*x = P2PConnectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PConnectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PConnectionData) ProtoMessage() {}

func (x *P2PConnectionData) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PConnectionData.ProtoReflect.Descriptor instead.
func (*P2PConnectionData) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{4}
}

func (x *P2PConnectionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *P2PConnectionData) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *P2PConnectionData) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *P2PConnectionData) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

func (x *P2PConnectionData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *P2PConnectionData) GetPeer() *P2PPeerData {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *P2PConnectionData) GetRelayAddress() string {
	if x != nil {
		return x.RelayAddress
	}
	return ""
}

type P2PConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status  bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *P2PConnectionStatus) Reset() {
	*x = P2PConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PConnectionStatus) ProtoMessage() {}

func (x *P2PConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PConnectionStatus.ProtoReflect.Descriptor instead.
func (*P2PConnectionStatus) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{5}
}

func (x *P2PConnectionStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *P2PConnectionStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *P2PConnectionStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type P2PRelayServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []string `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *P2PRelayServers) Reset() {
	*x = P2PRelayServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PRelayServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PRelayServers) ProtoMessage() {}

func (x *P2PRelayServers) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PRelayServers.ProtoReflect.Descriptor instead.
func (*P2PRelayServers) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{6}
}

func (x *P2PRelayServers) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

type P2PRelayConnectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     bool         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Id         string       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Mode       string       `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Peer       *P2PPeerData `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	SourcePeer *P2PPeerData `protobuf:"bytes,6,opt,name=sourcePeer,proto3" json:"sourcePeer,omitempty"`
	TargetPeer *P2PPeerData `protobuf:"bytes,7,opt,name=targetPeer,proto3" json:"targetPeer,omitempty"`
}

func (x *P2PRelayConnectionData) Reset() {
	*x = P2PRelayConnectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PRelayConnectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PRelayConnectionData) ProtoMessage() {}

func (x *P2PRelayConnectionData) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PRelayConnectionData.ProtoReflect.Descriptor instead.
func (*P2PRelayConnectionData) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{7}
}

func (x *P2PRelayConnectionData) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *P2PRelayConnectionData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *P2PRelayConnectionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *P2PRelayConnectionData) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *P2PRelayConnectionData) GetPeer() *P2PPeerData {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *P2PRelayConnectionData) GetSourcePeer() *P2PPeerData {
	if x != nil {
		return x.SourcePeer
	}
	return nil
}

func (x *P2PRelayConnectionData) GetTargetPeer() *P2PPeerData {
	if x != nil {
		return x.TargetPeer
	}
	return nil
}

type P2PRelayPeersStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *P2PRelayPeersStatus) Reset() {
	*x = P2PRelayPeersStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PRelayPeersStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PRelayPeersStatus) ProtoMessage() {}

func (x *P2PRelayPeersStatus) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PRelayPeersStatus.ProtoReflect.Descriptor instead.
func (*P2PRelayPeersStatus) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{8}
}

func (x *P2PRelayPeersStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *P2PRelayPeersStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type P2PRelayOpenStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *P2PRelayOpenStream) Reset() {
	*x = P2PRelayOpenStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PRelayOpenStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PRelayOpenStream) ProtoMessage() {}

func (x *P2PRelayOpenStream) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PRelayOpenStream.ProtoReflect.Descriptor instead.
func (*P2PRelayOpenStream) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{9}
}

func (x *P2PRelayOpenStream) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type P2PRelayStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *P2PRelayStreamInfo) Reset() {
	*x = P2PRelayStreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_p2p_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PRelayStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PRelayStreamInfo) ProtoMessage() {}

func (x *P2PRelayStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_model_p2p_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PRelayStreamInfo.ProtoReflect.Descriptor instead.
func (*P2PRelayStreamInfo) Descriptor() ([]byte, []int) {
	return file_model_p2p_proto_rawDescGZIP(), []int{10}
}

func (x *P2PRelayStreamInfo) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *P2PRelayStreamInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *P2PRelayStreamInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_model_p2p_proto protoreflect.FileDescriptor

var file_model_p2p_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x32, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x5a, 0x0a, 0x10, 0x50, 0x32, 0x50, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x1d, 0x0a, 0x07, 0x50, 0x32, 0x50, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x0b, 0x50, 0x32, 0x50, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x50,
	0x32, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x32, 0x50, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x50, 0x32, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x32, 0x50, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x57, 0x0a, 0x13, 0x50, 0x32, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x0f, 0x50, 0x32,
	0x50, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x50, 0x32, 0x50, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50,
	0x32, 0x50, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x32, 0x50,
	0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x50, 0x32, 0x50, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x13, 0x50, 0x32, 0x50, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x50, 0x32, 0x50, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50,
	0x32, 0x50, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x12, 0x50, 0x32,
	0x50, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_p2p_proto_rawDescOnce sync.Once
	file_model_p2p_proto_rawDescData = file_model_p2p_proto_rawDesc
)

func file_model_p2p_proto_rawDescGZIP() []byte {
	file_model_p2p_proto_rawDescOnce.Do(func() {
		file_model_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_p2p_proto_rawDescData)
	})
	return file_model_p2p_proto_rawDescData
}

var file_model_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_model_p2p_proto_goTypes = []interface{}{
	(*P2PClientContext)(nil),       // 0: model.P2PClientContext
	(*P2PData)(nil),                // 1: model.P2PData
	(*P2PPeerData)(nil),            // 2: model.P2PPeerData
	(*P2PConnectionRequest)(nil),   // 3: model.P2PConnectionRequest
	(*P2PConnectionData)(nil),      // 4: model.P2PConnectionData
	(*P2PConnectionStatus)(nil),    // 5: model.P2PConnectionStatus
	(*P2PRelayServers)(nil),        // 6: model.P2PRelayServers
	(*P2PRelayConnectionData)(nil), // 7: model.P2PRelayConnectionData
	(*P2PRelayPeersStatus)(nil),    // 8: model.P2PRelayPeersStatus
	(*P2PRelayOpenStream)(nil),     // 9: model.P2PRelayOpenStream
	(*P2PRelayStreamInfo)(nil),     // 10: model.P2PRelayStreamInfo
	nil,                            // 11: model.P2PRelayOpenStream.DataEntry
}
var file_model_p2p_proto_depIdxs = []int32{
	2,  // 0: model.P2PConnectionRequest.peer:type_name -> model.P2PPeerData
	2,  // 1: model.P2PConnectionData.peer:type_name -> model.P2PPeerData
	2,  // 2: model.P2PRelayConnectionData.peer:type_name -> model.P2PPeerData
	2,  // 3: model.P2PRelayConnectionData.sourcePeer:type_name -> model.P2PPeerData
	2,  // 4: model.P2PRelayConnectionData.targetPeer:type_name -> model.P2PPeerData
	11, // 5: model.P2PRelayOpenStream.data:type_name -> model.P2PRelayOpenStream.DataEntry
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_model_p2p_proto_init() }
func file_model_p2p_proto_init() {
	if File_model_p2p_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_p2p_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PClientContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PPeerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PConnectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PRelayServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PRelayConnectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PRelayPeersStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PRelayOpenStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_p2p_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PRelayStreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_p2p_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_p2p_proto_goTypes,
		DependencyIndexes: file_model_p2p_proto_depIdxs,
		MessageInfos:      file_model_p2p_proto_msgTypes,
	}.Build()
	File_model_p2p_proto = out.File
	file_model_p2p_proto_rawDesc = nil
	file_model_p2p_proto_goTypes = nil
	file_model_p2p_proto_depIdxs = nil
}
